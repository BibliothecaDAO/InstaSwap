package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"github.com/metaforo/indexer-graphql/graph/model"
	"github.com/metaforo/indexer-graphql/graph/utils"
)

// PoolKeys is the resolver for the pool_keys field.
func (r *queryResolver) PoolKeys(ctx context.Context) ([]*model.PoolKey, error) {
	var pool_keys []*model.PoolKey

	err := r.DB.Model(&pool_keys).Select()
	if err != nil {
		return nil, err
	}
	return pool_keys, nil
}

// PoolKey is the resolver for the pool_key field.
func (r *queryResolver) PoolKey(ctx context.Context, keyHash string) (*model.PoolKey, error) {
	pool_key := &model.PoolKey{}

	err := r.DB.Model(pool_key).Where("key_hash=?", utils.Hex2BigNum(keyHash)).Select()
	if err != nil {
		return nil, err
	}
	return pool_key, nil
}

// PositionTransfers is the resolver for the position_transfers field.
func (r *queryResolver) PositionTransfers(ctx context.Context) ([]*model.PositionTransfer, error) {
	var position_transfers []*model.PositionTransfer

	err := r.DB.Model(&position_transfers).Select()
	if err != nil {
		return nil, err
	}
	return position_transfers, nil
}

// PositionTransfer is the resolver for the position_transfer field.
func (r *queryResolver) PositionTransfer(ctx context.Context, transactionHash string) (*model.PositionTransfer, error) {
	position_transfer := &model.PositionTransfer{}

	err := r.DB.Model(position_transfer).Where("transaction_hash=?",  utils.Hex2BigNum(transactionHash)).Select()
	if err != nil {
		return nil, err
	}
	return position_transfer, nil
}

// ListLiquidity is the resolver for the list_liquidity field.
func (r *queryResolver) ListLiquidity(ctx context.Context, account string) ([]*model.PositionTransfer, error) {
	var position_transfers []*model.PositionTransfer

	err := r.DB.Model(&position_transfers).Where("to_address=?",utils.Hex2BigNum(account)).Select()
	if err != nil {
		return nil, err
	}
	return position_transfers, nil
}

// PositionDeposits is the resolver for the position_deposits field.
func (r *queryResolver) PositionDeposits(ctx context.Context) ([]*model.PositionDeposit, error) {
	var position_deposits []*model.PositionDeposit

	err := r.DB.Model(&position_deposits).Select()
	if err != nil {
		return nil, err
	}
	return position_deposits, nil
}

// PositionDeposit is the resolver for the position_deposit field.
func (r *queryResolver) PositionDeposit(ctx context.Context, transactionHash string) (*model.PositionDeposit, error) {
	position_deposit := &model.PositionDeposit{}

	err := r.DB.Model(position_deposit).Where("transaction_hash=?",  utils.Hex2BigNum(transactionHash)).Select()
	if err != nil {
		return nil, err
	}
	return position_deposit, nil
}

// Swap is the resolver for the swap field.
func (r *queryResolver) Swap(ctx context.Context, transactionHash string) (*model.Swap, error) {
	swap := &model.Swap{}

	err := r.DB.Model(swap).Where("transaction_hash=?",  utils.Hex2BigNum(transactionHash)).Select()
	if err != nil {
		return nil, err
	}
	return swap, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
